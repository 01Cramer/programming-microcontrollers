	LJMP START
	ORG 100H

START:
	MOV TMOD, #00000001B ;Time mode 1
	MOV TH0, #76 ;Timer 0 count to 50ms
	MOV TL0, #0

	LCALL	LCD_CLR
	MOV DPTR, #TIME_TEXT
  LCALL   WRITE_TEXT
	LCALL	WAIT_KEY
	LCALL LCD_CLR
SET_TIME: 
	LCALL	INPUT
	MOV R3, A ; Hour
	LCALL BCD
	MOV	A, #':'
	LCALL	WRITE_DATA
	LCALL	INPUT
	MOV R4, A ; Minute
	LCALL	BCD
	MOV	A, #':'
	LCALL	WRITE_DATA
	LCALL	INPUT
	MOV R5, A ; Second
	LCALL 	BCD
SET_ALARM:
	MOV A, #20
	LCALL DELAY_100MS
	LCALL	LCD_CLR
	MOV DPTR, #ALARM_TEXT
  LCALL   WRITE_TEXT
	LCALL	WAIT_KEY
	LCALL LCD_CLR

	LCALL INPUT
	MOV R0, A ; Hour
	LCALL BCD
	MOV	A, #':'
	LCALL	WRITE_DATA
	LCALL	INPUT
	MOV R7, A ; Minute
	LCALL	BCD
	MOV	A, #':'
	LCALL	WRITE_DATA
	LCALL	INPUT
	MOV R2, A ; Second
	LCALL BCD
	MOV A, #20
	LCALL DELAY_100MS
	LCALL	LCD_CLR
	
	MOV DPTR, #STARTING_TIMER
  LCALL   WRITE_TEXT
	MOV A, #20
	LCALL DELAY_100MS
	SETB TR0 ;	Start timer
LOOP:
	MOV R6,#20 ; Wait 20*50ms=1s
	LCALL LCD_CLR
	MOV A, R3
	LCALL	BCD
	MOV A, #':'
	LCALL WRITE_DATA
	MOV A, R4
	LCALL	BCD
	MOV A, #':'
	LCALL WRITE_DATA
	MOV A, R5
	LCALL	BCD
TIME_N50:
	JNB TF0,$ ; Wait for timer 0 to count 50ms
	MOV TH0, #76 ;TH0 for 50ms
	CLR TF0 ; Clear flag for timer 0
	DJNZ R6,TIME_N50 ; Waiting N*50ms
	INC R5
UPDATE:
	CJNE R5, #60, GO_TO_LOOP
	LCALL	MINUTE
GO_TO_LOOP:
	LCALL	COMPARE
	SJMP LOOP

MINUTE:
	MOV R5, #0
	INC R4
	SETB P1.7 ; Alarm off
	SJMP HOUR
	RET

HOUR:
	CJNE R4, #60, GO_TO_LOOP
	MOV R4, #0
	INC R3
	CJNE R3, #24, GO_TO_LOOP
	MOV R3, #0
	RET

INPUT: ; Allows to input two digits as a number
	LCALL WAIT_KEY
	MOV B,#10 
	MUL AB 
	MOV R1,A 
	LCALL WAIT_KEY
	ADD A,R1 
	RET

BCD: 
  MOV B, #10
  DIV AB
  SWAP A
  ADD A,B
  LCALL   WRITE_HEX ; Print output in bcd
	RET

COMPARE: ; Compare time and alaram
	MOV A, R5
	CJNE A, 02H, BACK; Check sec
	MOV A, R4
	CJNE A, 07H, BACK ; Check min
	MOV A, R3
	CJNE A, 00H, BACK ; Check hour
ALARM:
	CLR P1.7
BACK:
	RET

TIME_TEXT:
  DB 'SET TIME',0

ALARM_TEXT:
	DB 'SET ALARM', 0

STARTING_TIMER:
	DB 'STARTING TIMER', 0


